target C;

preamble {=
  #include "psynth.h"
=}

reactor FilterBase {
  mutable input in: fsample_buffer_t*
  output out: fsample_buffer_t*
  input ctrl: midi_controller_change_t;
}

reactor SimpleFilter extends FilterBase {
  state cutoff_idx: int

  reaction(startup) {=
    self->cutoff_idx = SAMPLE_SIZE/2;
  =}
  
  reaction(ctrl) {=
    switch(ctrl->value.controller) {
      case FILTER_ENVELOPE:
        break;
      case FILTER_FREQ:
      case MASTER_FILTER:
        self->cutoff_idx = ctrl->value.value * SAMPLE_SIZE/ (127 * 2);
        break;
    }
  =}

  reaction(in) -> out {=
    // Apply filter. Just skip frequencies above cutoff. Remember that
    // the FFT will give out a mirror around SAMPLE_SIZE/2. 
    for (int i = self->cutoff_idx; i<SAMPLE_SIZE/2; i++) {
      in->value->samples[i].r = 0;
      in->value->samples[i].i = 0;
      in->value->samples[SAMPLE_SIZE-(i+1)].r = 0;
      in->value->samples[SAMPLE_SIZE-(i+1)].i = 0;
    }
    lf_set_token(out, in->token);
  =}
}