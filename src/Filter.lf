target C;

preamble {=
  #include "midi.h"
  #include "freq.h"
  #include "common.h"
  #include "buffer.h"
  #include <string.h>
=}

reactor FilterBase {
  mutable input in: fsample_buffer_t*
  output out: fsample_buffer_t*
  input ctrl: midi_controller_change_t;
}

reactor SimpleFilter extends FilterBase {

  state omegaC: double = 0;
  state alpha: double = 0
  state beta: double = 0

  state cutoff_idx: int

  reaction(startup) {=
    // Calculate filter coefficients
    self->cutoff_idx = SAMPLE_SIZE-1;
  =}
  
  reaction(ctrl) {=
    int nyquist = SAMPLE_RATE/2;
    if (ctrl->value.controller == TIMBRE) {
      double cutoff_freq = ctrl->value.value * nyquist / 127;
      self->cutoff_idx = (int)(cutoff_freq * SAMPLE_SIZE / nyquist);
      lf_print("New cutoff-idx = %d", self->cutoff_idx);
    }
  =}

  reaction(in) -> out {=
    // Apply filter
    for (int i = self->cutoff_idx+1; i < SAMPLE_SIZE; i++) {
      in->value->samples[i].r = 0;
      in->value->samples[i].i = 0;
    }
    lf_set_token(out, in->token);
  =}
}