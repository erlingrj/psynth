target C

preamble {=
  #include "psynth.h"
=}

reactor FilterBase {
  mutable input in: fsample_buffer_t*
  output out: fsample_buffer_t*
  input ctrl: midi_controller_change_t
}

reactor SimpleFilter extends FilterBase {
  state omegaC: double = 0
  state alpha: double = 0
  state beta: double = 0

  state cutoff_idx: int

  reaction(startup) {=
    // Calculate filter coefficients
    self->cutoff_idx = SAMPLE_SIZE-1;
  =}

  reaction(ctrl) {=
    switch(ctrl->value.controller) {
      case FILTER_ENVELOPE:
        break;
      case FILTER_FREQ: {
        int nyquist = SAMPLE_RATE/2;
        double cutoff_freq = ctrl->value.value * nyquist / 127;
        self->cutoff_idx = (int)(cutoff_freq * SAMPLE_SIZE / nyquist);
        break;
      }
      case MASTER_FILTER: {
        int nyquist = SAMPLE_RATE/2;
        double cutoff_freq = ctrl->value.value * nyquist / 127;
        self->cutoff_idx = (int)(cutoff_freq * SAMPLE_SIZE / nyquist);
        break;
      }
    }
  =}

  reaction(in) -> out {=
    // Apply filter
    for (int i = self->cutoff_idx+1; i < SAMPLE_SIZE; i++) {
      in->value->samples[i].r = 0;
      in->value->samples[i].i = 0;
    }
    lf_set_token(out, in->token);
  =}
}
