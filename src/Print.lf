target C;

preamble {=
  #include "common.h"
  #include <math.h>
  #include <string.h>
=}

reactor Print(filename: string = "waves.csv", pg_name: string = "plot.pg", only_last:bool=true) {
  input tsamples: sample_buf_t
  input fsamples: fsample_buf_t

  state file: FILE* = {= NULL =}
  state cnt:int = 0;

  reaction(startup) {=
    self->file = fopen(self->filename, "w");
    if(self->file == NULL) {
      lf_print_error_and_exit("Failed to open file: %s", self->filename);
    } else {
      fprintf(self->file, "Time,Amplitude\n");
    }
    

    FILE *gnuplotScript = fopen(self->pg_name, "w");
    if (gnuplotScript == NULL) {
        perror("Error creating Gnuplot script file");
        return 1;
    }
    
    fprintf(gnuplotScript, "set terminal pdf\n");
    fprintf(gnuplotScript, "set output '%s.pdf'\n", self->filename);
    fprintf(gnuplotScript, "set datafile separator ','\n");
    fprintf(gnuplotScript, "set key autotitle columnhead\n");
    fprintf(gnuplotScript, "plot '%s' with lines\n", self->filename);
    fclose(gnuplotScript);
  =}

  reaction(tsamples) {=
    // If we have the only_last option, then we overwrite each time we have
    // collected enough samples
    if (self->only_last) {
      self->cnt += SAMPLE_SIZE;
      if (self->cnt > 5000) {
        fclose(self->file);
        self->file = fopen(self->filename, "w");
        if(self->file == NULL) {
          lf_print_error_and_exit("Failed to open file: %s", self->filename);
        } else {
          fprintf(self->file, "Time,Amplitude\n");
        }
        self->cnt=0;
      }
    }

    double t = lf_time_logical_elapsed() / 1.0e9;
    for (int i = 0; i<SAMPLE_SIZE; i++) {
      fprintf(self->file,
        "%f,%f\n",
        t,
        tsamples->value[i]
      );
      t += SAMPLE_STEP;
    }
  =}

  reaction(fsamples) {=
    // If we have the only_last option, then we overwrite each time we have
    // collected enough samples
    if (self->only_last) {
      fclose(self->file);
      self->file = fopen(self->filename, "w");
      if(self->file == NULL) {
        lf_print_error_and_exit("Failed to open file: %s", self->filename);
      } else {
        fprintf(self->file, "Time,Amplitude\n");
      }
    }
    for (int i = 0; i<SAMPLE_SIZE; i++) {
      fprintf(self->file,
        "%i,%f\n",
        i,
        sqrt(fsamples->value[i].r * fsamples->value[i].r + fsamples->value[i].i * fsamples->value[i].i)
      );
    }
  =}

  reaction(shutdown) {=
    fclose(self->file);
    char gnuplotcmd[1024];
    snprintf(gnuplotcmd, sizeof(gnuplotcmd), "gnuplot %s", self->pg_name);
    system(gnuplotcmd);
  =}
}
