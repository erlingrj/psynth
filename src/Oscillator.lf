target uC

preamble {=
  #include "psynth.h"
=}

reactor Oscillator(initialType: osc_type_t = {= OSC_SINE =}) {
  preamble {=
    #define SQUARE_SCALE_FACTOR 0.2
    #define SAW_SCALE_FACTOR 0.4

    double osc_sine(float *samples, double amplitude, double phase, double freq, double period) {
      for (int i = 0; i<SAMPLE_SIZE; i++) {
        samples[i] = sin(2*PI*phase*freq)*amplitude;
        phase += SAMPLE_STEP;
        if (phase >= period) {
          phase = (phase-period);
        }
      }
      return phase;
    }

    double osc_saw(float *samples, double amplitude, double phase, double freq, double period) {
      for (int i = 0; i<SAMPLE_SIZE; i++) {
        samples[i] = (-1.0 + 2*phase*freq)*amplitude*SAW_SCALE_FACTOR;
        phase += SAMPLE_STEP;
        if (phase >= period) {
          phase = (phase-period);
        }
      }
      return phase;
    }

    double osc_square(float *samples, double amplitude, double phase, double freq, double period) {
      for (int i = 0; i<SAMPLE_SIZE; i++) {
        if (phase < period/2) {
          samples[i] = -amplitude*SQUARE_SCALE_FACTOR;
        } else {
          samples[i] = amplitude*SQUARE_SCALE_FACTOR;
        }
        phase += SAMPLE_STEP;
        if (phase >= period) {
          phase = (phase-period);
        }
      }
      return phase;
    }

    double osc_tri(float *samples, double amplitude, double phase, double freq, double period) {
      for (int i = 0; i<SAMPLE_SIZE; i++) {
        bool rising = phase < period/2;

        if (rising) {
          samples[i] = (-1.0 + 4*phase*freq) * amplitude;
          phase += SAMPLE_STEP;
        } else {
          samples[i] = (1.0 - 4*(phase - period/2)*freq)*amplitude;
          phase += SAMPLE_STEP;
          if (phase >= period) {
            phase = (phase-period);
          }
        }
      }
      return phase;
    }
  =}

  input freq: double
  input amp: double
  output samples: sample_buffer_t
  input type: osc_type_t
  input dead: bool

  state phase: double = 0
  state freq: double = 0
  state period: double = 0
  state amplitude: double = 1.0
  state type: osc_type_t = initialType
  state on: bool = false

  state sample_period: interval_t
  state sample_step: double

  logical action a

  reaction(startup) -> a {=
    self->sample_period = SEC(SAMPLE_SIZE)/SAMPLE_RATE;
    lf_schedule(a,self->sample_period);
  =}

  reaction(freq) {=
    self->phase = 0;
    self->freq = freq->value;
    self->period = 1/freq->value;
    self->on = true;
  =}

  reaction(amp) {=
    self->amplitude = amp->value;
  =}

  reaction(type) {=
    self->type = type->value;
  =}

  reaction(a) -> samples, a {=
    sample_buffer_t _samples;
    if (self->on) {
      switch (self->type) {
        case OSC_SINE:
          self->phase = osc_sine(_samples.buffer, self->amplitude, self->phase, self->freq, self->period);
          break;
        case OSC_SQUARE:
          self->phase = osc_square(_samples.buffer, self->amplitude, self->phase, self->freq, self->period);
          break;
        case OSC_SAW:
          self->phase = osc_saw(_samples.buffer, self->amplitude, self->phase, self->freq, self->period);
          break;
        case OSC_TRI:
          self->phase = osc_tri(_samples.buffer, self->amplitude, self->phase, self->freq, self->period);
          break;
      }
      lf_set(samples, _samples);
    }
    lf_schedule(a, self->sample_period);
  =}

  reaction(dead) {=
    self->on = false;
  =}
}
