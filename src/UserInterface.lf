target C;

import WebSocketServer from "lib/WebSocketServer.lf"
import KeyboardInput from "lib/Keyboard.lf"

preamble {= 
    #include <stdio.h>
    #include "common.h"
    #include "midi.h"
=}

reactor UserInterface(sample_size:int=128) {
    input samples: sample_buf_t
    output midi_event:int[3]
}


reactor WebSocketUserInterface extends UserInterface {
    sock = new WebSocketServer(max_clients=1)
    state wsi: void* = 0 

    state buffer: SAMPLE_TYPE*
    state idx: int = 0;

    reaction(startup) {=
        self->buffer = (SAMPLE_TYPE *) malloc(SAMPLE_NUM_BYTES);
    =}
    
    reaction(sock.received) -> midi_event {=
        lf_print("Got MIDI from browser %s", sock.received->value->message);
    =}

    reaction(samples) -> sock.send {=
        if (self->wsi) {
            for (int i = 0; i<SAMPLE_SIZE; i=i+16) {
                self->buffer[self->idx++] = samples->value[i];
            }
            if (self->idx == SAMPLE_SIZE) {
                char* message; web_socket_message_t* container = (web_socket_message_t*)malloc(sizeof(web_socket_message_t));
                container->message = (char *) self->buffer;
                container->length = SAMPLE_NUM_BYTES;
                container->wsi = self->wsi;
                lf_set(sock.send, container);
                self->idx = 0;
            }
        }
    =}





    reaction(sock.connected) {=
        if(sock.connected->value.connected) {
            lf_print("New client connected to our web socket");
            self->wsi = sock.connected->value.wsi;
        } else {
            lf_print("Client disconnected from our web socket");
            self->wsi = 0;
        }
    =}
}


reactor CursesUserInterface extends UserInterface {
    keyboard = new KeyboardInput()
    state key_pressed:bool*;
    state octave:int = {=NOTE_C4=};
    state program:int = 0;
    reaction(startup) {=
        self->key_pressed = (bool *) malloc(NOTE_G9*sizeof(bool));
    =}

    logical action killall;

    reaction(keyboard.key) -> midi_event, killall {=
        int note = -1;
        int program = -1;

        switch(keyboard.key->value) {
            case 'a':
                note=self->octave+0;
                break;
            case 'w':
                note=self->octave+1;
                break;
            case 's':
                note=self->octave+2;
                break;
            case 'e':
                note=self->octave+3;
                break;
            case 'd':
                note=self->octave+4;
                break;
            case 'f':
                note=self->octave+5;
                break;
            case 't':
                note=self->octave+6;
                break;
            case 'g':
                note=self->octave+7;
                break;
            case 'y':
                note=self->octave+8;
                break;
            case 'h':
                note=self->octave+9;
                break;
            case 'u':
                note=self->octave+10;
                break;
            case 'j':
                note=self->octave+11;
                break;
            case 'k':
                note=self->octave+12;
                break;
            case 'z':
                self->octave-=12;
                break;
            case 'x':
                self->octave+=12;
                break;
            case 'c':
                program = (self->program+1) % NUM_OSC;
                break;
            case 'q':
                lf_schedule(killall, 0);
                break;
            default:
                lf_print("Illegal character");
                return;
                break;
        }

        if (note >= 0) {
            if (self->key_pressed[note]) {
                midi_note_on_t temp = MIDI_NOTE_OFF(note);
                memcpy(midi_event->value, &temp, sizeof(temp));
                self->key_pressed[note] = false;
            } else {
                midi_note_on_t temp = MIDI_NOTE_ON(note);
                memcpy(midi_event->value, &temp, sizeof(temp));
                self->key_pressed[note] = true;
            }
            lf_print("Got %d", note);
            lf_set_present(midi_event);
        } else if (program >= 0) {
            midi_program_change_t temp = MIDI_PROGRAM_CHANGE(program);
            memcpy(midi_event->value, &temp, sizeof(temp));
            self->program = program;
            lf_set_present(midi_event);
        } 
    =}
    reaction(killall) -> killall, midi_event {=
        for (int i=0; i<NOTE_G9; i++) {
            if (self->key_pressed[i]) {    
                midi_note_on_t temp = MIDI_NOTE_OFF(i);
                memcpy(midi_event->value, &temp, sizeof(temp));
                self->key_pressed[i] = false;
                lf_set_present(midi_event);
                lf_schedule(killall, 0);
                return;
            }
        }
    =}
}
