target C

preamble {=
  #include "psynth.h"
=}

reactor AmplitudeEnvelope {
  input note_on: bool
  input note_off: bool
  input samples_raw: sample_buffer_t
  output samples: sample_buffer_t
}

// An amplitude envelope with 4 parameters. Uses modal reactors to
// jump between the 4 states.
reactor ADSREnvelope(
    attack: time = 50 msec,
    decay: time = 50 msec,
    sustain: SAMPLE_TYPE = 0.8,
    release: time = 40 msec) extends AmplitudeEnvelope {
  input ctrl: midi_controller_change_t
  input velocity: double
  output dead: bool
  state attack_rate: double
  state decay_rate: double
  state release_rate: double
  state velocity: double

  state attack_start: time
  state decay_start: time
  state release_start: time
  state sustain_start: time

  state amp_start: double = 0

  reaction(ctrl) {=
    switch (ctrl->value.controller) {
      case AMP_ENVELOPE: {
        if (ctrl->value.value == 0) ctrl->value.value++;
        self->release = SEC(1) * ctrl->value.value/127;
        self->release_rate = self->sustain/self->release;
        self->attack = SEC(1) * ctrl->value.value/127;
        self->attack_rate = 1.0/self->attack;
        break;
      }
    }
  =}

  reaction(startup) -> samples {=
    self->attack_rate = 1.0/self->attack;
    self->decay_rate= (1.0 - self->sustain)/self->decay;
    self->release_rate = self->sustain/self->release;
  =}

  initial mode Idle {
    reaction(note_on) velocity -> reset(Attack) {=
      // lf_print("Attack");
      self->attack_start = lf_time_logical_elapsed();
      self->decay_start = self->attack_start + self->attack;
      self->sustain_start = self->decay_start + self->decay;
      self->amp_start = 0;
      self->velocity = ((double)velocity->value)/127.0;
      lf_set_mode(Attack);
    =}
  }

  mode Attack {
    reaction(samples_raw) -> samples, reset(Decay) {=
      instant_t now = lf_time_logical_elapsed();
      instant_t ts = now - self->attack_start;

      SAMPLE_TYPE amp;
      for (int i = 0; i<SAMPLE_SIZE; i++) {
        amp = (ts + SEC(i*SAMPLE_STEP)) * self->attack_rate;
        samples->value.buffer[i] = samples_raw->value.buffer[i] * amp * self->velocity;
      }
      self->amp_start = amp;
      lf_set_present(samples);

      if (now >= self->decay_start) {
        lf_set_mode(Decay);
      }
    =}

    reaction(note_off) -> reset(Release) {=
      self->release_start = lf_time_logical_elapsed();
      lf_set_mode(Release);
    =}
  }

  mode Decay {
    reaction(samples_raw) -> samples, reset(Sustain) {=
      instant_t now = lf_time_logical_elapsed();
      instant_t ts  = now - self->decay_start;
      SAMPLE_TYPE amp;

      for (int i = 0; i<SAMPLE_SIZE; i++) {
        amp = self->amp_start - (ts + SEC(i*SAMPLE_STEP)) * self->decay_rate;
        samples->value.buffer[i] = samples_raw->value.buffer[i] * amp * self->velocity;
      }
      lf_set_present(samples);
      self->amp_start = amp;

      if (now >= self->sustain_start || amp <= self->sustain) {
        lf_set_mode(Sustain);
      }
    =}

    reaction(note_off) -> reset(Release) {=
      lf_set_mode(Release);
      self->release_start = lf_time_logical_elapsed();
    =}
  }

  mode Sustain {
    reaction(samples_raw) -> samples {=
      for (int i = 0; i<SAMPLE_SIZE; i++) {
        samples->value.buffer[i] = samples_raw->value.buffer[i] * self->amp_start * self->velocity;
      }
      lf_set_present(samples);
    =}

    reaction(note_off) -> reset(Release) {=
      lf_set_mode(Release);
      self->release_start = lf_time_logical_elapsed();
    =}
  }

  mode Release {
    reaction(samples_raw) -> samples, reset(Idle), dead {=
      instant_t now = lf_time_logical_elapsed();
      instant_t ts = now - self->release_start;
      bool done = false;
        for (int i = 0; i<SAMPLE_SIZE; i++) {
          SAMPLE_TYPE amp = self->amp_start - (ts + SEC(i*SAMPLE_STEP)) * self->release_rate;
          if (amp <= 0) {
            amp = 0;
            done = true;
          }
          samples->value.buffer[i] = samples_raw->value.buffer[i] * amp * self->velocity;
        }
      if(done) {
        lf_set(dead, true);
        lf_set_mode(Idle);
      }

      lf_set_present(samples);
    =}

    reaction(note_on) {=
      lf_print_error_and_exit("Should not receive note_on in release mode");
    =}
  }
}
