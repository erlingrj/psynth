target C;

preamble {=
  #include "common.h"
  #include "buffer.h"
  #include "midi.h"
=}

reactor AmplitudeEnvelope {
  input note_on: bool
  input note_off: bool
  mutable input samples_raw: sample_buffer_t*
  output samples: sample_buffer_t*
}

// An amplitude envelope with 4 parameters. Uses modal reactors to
// jump between the 4 states.
reactor ADSREnvelope(
  attack: time = 50 msec, 
  decay: time = 50 msec, 
  sustain:float = 0.8,
  release:time = 40 msec) extends AmplitudeEnvelope 
{
  input ctrl: midi_controller_change_t
  input velocity: double
  output dead:bool
  state attack_rate: double
  state decay_rate: double
  state release_rate: double
  state velocity: double

  state attack_start: time
  state decay_start: time
  state release_start: time
  state sustain_start: time

  state amp_start: double = 0
  
  reaction(ctrl) {=
    switch (ctrl->value.controller) {
      case RELEASE_TIME: {
        self->release = SEC(2) * ctrl->value.value/127;  
        self->release_rate = self->sustain/self->release;
        break;
      }
      case ATTACK_TIME: {
        self->attack = SEC(2) * ctrl->value.value/127;  
        self->attack_rate = 1.0/self->attack;
        break;

      }
    }
  =}

  reaction(startup) -> samples {=
    self->attack_rate = 1.0/self->attack;  
    self->decay_rate= (1.0 - self->sustain)/self->decay;  
    self->release_rate = self->sustain/self->release;  

    lf_set_destructor(samples, sample_buffer_destructor);
    lf_set_copy_constructor(samples, sample_buffer_copy);
  =}

  initial mode Idle {
    reaction(note_on) velocity -> Attack {=
      // lf_print("Attack");
      self->attack_start = lf_time_logical_elapsed();
      self->decay_start = self->attack_start + self->attack;
      self->sustain_start = self->decay_start + self->decay;
      self->amp_start = 0;
      self->velocity = ((double)velocity->value)/127.0;
      lf_set_mode(Attack);
    =}
  }

  mode Attack {
    reaction(samples_raw) -> samples, Decay {=
      sample_buffer_t *buffer = samples_raw->value;
      instant_t now = lf_time_logical_elapsed();
      instant_t ts = now - self->attack_start;

      float amp;
      for (int i = 0; i<SAMPLE_SIZE; i++) {
        amp = (ts + SEC(i*SAMPLE_STEP)) * self->attack_rate;
        buffer->samples[i] = buffer->samples[i] * amp * self->velocity;
      }
      lf_set_token(samples, samples_raw->token);

      if (now >= self->decay_start) {
        lf_set_mode(Decay);
        self->amp_start = amp;
      }
    =}

    reaction(note_off) -> Release {=
      self->release_start = lf_time_logical_elapsed();
      lf_set_mode(Release);
    =}
  }

  mode Decay {
    reaction(samples_raw) -> samples, Sustain {=
      sample_buffer_t *buffer = samples_raw->value;

      instant_t now = lf_time_logical_elapsed();
      instant_t ts  = now - self->decay_start;
      float amp;

      for (int i = 0; i<SAMPLE_SIZE; i++) {
        amp = self->amp_start - (ts + SEC(i*SAMPLE_STEP)) * self->decay_rate;
        buffer->samples[i] = buffer->samples[i] * amp * self->velocity;
      }
      lf_set_token(samples, samples_raw->token);

      if (now >= self->sustain_start || amp <= self->sustain) {
        self->amp_start = amp;
        lf_set_mode(Sustain);
        // lf_print("Sustain");
      }
    =}

    reaction(note_off) -> Release {=
      lf_set_mode(Release);
      self->release_start = lf_time_logical_elapsed();
        // lf_print("Release");
    =}
  }

  mode Sustain {
    reaction(samples_raw) -> samples {=
      sample_buffer_t *buffer = samples_raw->value;
      for (int i = 0; i<SAMPLE_SIZE; i++) {
        buffer->samples[i] = buffer->samples[i] * self->amp_start * self->velocity;
      }
      lf_set_token(samples, samples_raw->token);
    =}

    reaction(note_off) -> Release {=
      lf_set_mode(Release);
      self->release_start = lf_time_logical_elapsed();
        // lf_print("Release");
    =}
  }

  mode Release {
    reaction(samples_raw) -> samples, Idle, dead {=
      sample_buffer_t * buffer = samples_raw->value;
      instant_t now = lf_time_logical_elapsed();
      instant_t ts = now - self->release_start;
      bool done = false;
        for (int i = 0; i<SAMPLE_SIZE; i++) {
          float amp = self->amp_start - (ts + SEC(i*SAMPLE_STEP)) * self->release_rate;
          if (amp <= 0) {
            amp = 0;
            done = true;
          }
          buffer->samples[i] = buffer->samples[i] * amp * self->velocity;
        }
      if(done) {
        lf_set(dead, true);
        lf_set_mode(Idle);
      }
      
      lf_set_token(samples, samples_raw->token);
    =}

    reaction(note_on) -> Attack {=
      lf_print_error("Should not receive note_on in Release mode.");
    =}
  }
}