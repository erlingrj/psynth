target C;

preamble {=
    #include "midi.h"
    #include <string.h> // memcpy
=}

reactor Sequence(sequence: int[] = {48, 50, 52, 53, 49}, n_sequence: int = 5) {
    output midi_event:int[3]

    timer t_on(0, 1 sec)
    timer t_off(900 msec, 1 sec)

    state idx:int=0

    reaction(t_on) -> midi_event {=
        midi_note_on_t temp = MIDI_NOTE_ON(self->sequence[self->idx]);
        memcpy(midi_event->value, &temp, sizeof(temp));
        lf_set_present(midi_event);
    =}

    reaction(t_off) -> midi_event {=
        midi_note_off_t temp = MIDI_NOTE_OFF(self->sequence[self->idx]);
        memcpy(midi_event->value, &temp, sizeof(temp));
        
        if(++self->idx == self->n_sequence) {
            self->idx=0;
        }

        lf_set_present(midi_event);
    =}
}


reactor RandomSequence(period:time = 2 sec, length:int = 10) {
    output midi_event:int[3]
    timer t(0, period)
    timer tOff(900 msec, period)
    logical action off
    state note_playing:int

    preamble {=
    =}
    reaction(startup) {=
        srand(lf_time_physical());
    =}

    reaction(tOff) -> midi_event {=
        midi_note_off_t temp = MIDI_NOTE_OFF(self->note_playing);
        memcpy(midi_event->value, &temp, sizeof(temp));
        lf_set_present(midi_event);
    =}
    
    reaction(t) -> midi_event, off {=
        self->note_playing = 60 + rand() % 12;
        midi_note_on_t temp = MIDI_NOTE_ON(self->note_playing);
        memcpy(midi_event->value, &temp, sizeof(temp));
        lf_set_present(midi_event);
    =}

}