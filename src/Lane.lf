target C

import Oscillator from "./Oscillator.lf"
import ADSREnvelope from "./Envelope.lf"

preamble {=
  #include "psynth.h"
=}

reactor Lane(bank_index: int = 0) {
  input note_on: midi_note_on_t
  input note_off: midi_note_off_t
  input ctrl: midi_controller_change_t
  output samples: sample_buffer_t*
  output dead: bool

  osc = new Oscillator(initialType = {= OSC_SINE =})
  env = new ADSREnvelope()
  osc.samples -> env.samples_raw
  env.samples -> samples
  env.dead -> osc.dead
  env.dead -> dead

  reaction(note_on) -> env.note_on, env.velocity, osc.freq {=
    lf_set(env.note_on, true);
    lf_set(env.velocity, note_on->value.velocity);
    lf_set(osc.freq, freqs[note_on->value.pitch]);
  =}

  reaction(note_off) -> env.note_off {=
    lf_set(env.note_off, true);
  =}

  reaction(ctrl) -> osc.type, osc.amp, env.ctrl {=
    switch(ctrl->value.controller) {
          case OSCILLATOR: {
            osc_type_t osc_type = ctrl->value.value >> 5;
            if(osc_type > 3) {
              lf_print_error_and_exit("Error in oscillator type calculation");
            }
            lf_set(osc.type, osc_type);
            break;
          }
          case VOLUME: {
            double amp = ((double )ctrl->value.value) / 127;
            lf_set(osc.amp, amp);
          }
            break;
          case OSCILLATOR_MOD:
            break;
          case AMP_ENVELOPE:
            memcpy(&env.ctrl->value, &ctrl->value, sizeof(midi_controller_change_t));
            lf_set_present(env.ctrl);
            break;
    }
  =}
}

reactor Merge(num_lanes: int = 1) {
  input[num_lanes] in: sample_buffer_t*
  output out: sample_buffer_t*

  reaction(startup) -> out {=
    lf_set_destructor(out, sample_buffer_destructor);
    lf_set_copy_constructor(out, sample_buffer_copy);
  =}

  reaction(in) -> out {=
    int n_present = 0;
    for (int i = 0; i<in_width; i++) {
      if (in[i]->is_present) {
        n_present++;
      }
    }
    // lf_print("n_present=%d", n_present);

    sample_buffer_t * buffer = sample_buffer_ctor();
    for (int i=0; i<in_width; i++) {
      if (in[i]->is_present) {
        for (int j=0; j<SAMPLE_SIZE; j++) {
          buffer->samples[j] += in[i]->value->samples[j]/self->num_lanes;
        }
      }
    }
    lf_set(out, buffer);
  =}
}
