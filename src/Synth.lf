target C

import Oscillator from "Oscillator.lf"
import ADSREnvelope from "Envelope.lf"
import Compressor, Clipper from "Compressor.lf"
import FFT, IFFT from "FFT.lf"
import SimpleFilter from "Filter.lf"

preamble {=
  #include "midi.h"
  #include "freq.h"
  #include "common.h"
  #include "buffer.h"
  #include <string.h>
=}

reactor Synth(n_lanes: int = 5) {
  input midi_event: midi_base_msg_t
  output samples: sample_buffer_t*
  state lane_playing: int*

  lanes = new[n_lanes] Lane()
  merge = new Merge(num_lanes=n_lanes)
  
  fft = new FFT()
  ifft = new IFFT()
  filter = new SimpleFilter()
  compressor = new Compressor()

  lanes.samples -> merge.in
  // merge.out -> fft.tsamples
  // fft.fsamples -> filter.in
  // filter.out -> ifft.fsamples
  // ifft.tsamples -> samples
  merge.out -> compressor.samples_raw
  compressor.samples -> samples


  

  reaction(startup) {=
    self->lane_playing = (int *) malloc(self->n_lanes * sizeof(int));
    for (int i = 0; i<self->n_lanes; i++) {
        self->lane_playing[i] = -1;
    }
  =}

  reaction(midi_event) -> lanes.note_on, lanes.note_off, lanes.ctrl, filter.ctrl {=
    midi_base_msg_t * midi_msg = &midi_event->value;

    // print_midi(midi_msg);

    // Some MIDI keyboards dont send NOTE_OFF only NOTE_ON with velocity=0
    if (midi_msg->status.type == NOTE_ON && 
        ((midi_note_on_t *) midi_msg)->velocity==0) {
        midi_msg->status.type = NOTE_OFF;
    }

    switch (midi_msg->status.type) {
      case NOTE_OFF: {
        midi_note_off_t * note_off = (midi_note_off_t *) midi_msg;
        for (int i = 0; i<self->n_lanes; i++) {
          if (self->lane_playing[i] == note_off->pitch) {
            memcpy(&lanes[i].note_off->value, midi_msg, sizeof(midi_note_off_t));
            lf_set_present(lanes[i].note_off);
            // lf_print("OFF: Found note at lane %d", i);
            self->lane_playing[i] = -1;
            break;
          }
        }
        break;
      }
      case NOTE_ON: {
        midi_note_on_t * note_on = (midi_note_on_t *) midi_msg;
        for (int i = 0; i<self->n_lanes; i++) {
          if (self->lane_playing[i] == -1) {
            memcpy(&lanes[i].note_on->value, midi_msg, sizeof(midi_note_on_t));
            lf_set_present(lanes[i].note_on);
            // lf_print("ON: Found note at lane %d", i);
            self->lane_playing[i] = note_on->pitch;
            break;
          }
        }
        break;
      }

      case CONTROL_CHANGE: {
        midi_controller_change_t * program = (midi_controller_change_t *) midi_msg;
        switch(program->controller) {
          case SOUND_VARIATION:
          case RELEASE_TIME:
          case ATTACK_TIME: {
            for (int i = 0; i<self->n_lanes; i++) {
              memcpy(&lanes[i].ctrl->value, program, sizeof(midi_controller_change_t));
              lf_set_present(lanes[i].ctrl);
            }
            break;
          }
          case TIMBRE:
            memcpy(&filter.ctrl->value, program, sizeof(midi_controller_change_t));
            lf_set_present(filter.ctrl);
            break;

        }
      }
    }
  =}
}

reactor Lane(bank_index: int = 0) {
  input note_on: midi_note_on_t
  input note_off: midi_note_off_t
  input ctrl: midi_controller_change_t
  output samples: sample_buffer_t*

  osc = new Oscillator(initialType = {= OSC_SINE =})
  env = new ADSREnvelope()

  reaction(note_on) -> env.note_on, env.velocity, osc.freq {=
    lf_set(env.note_on, true);
    lf_set(env.velocity, note_on->value.velocity);
    lf_set(osc.freq, freqs[note_on->value.pitch]);
  =}

  reaction(note_off) -> env.note_off {=
    lf_set(env.note_off, true);
  =}

  reaction(ctrl) -> osc.type, env.ctrl {=
    if (ctrl->value.controller == SOUND_VARIATION) {
      osc_type_t osc_type = ctrl->value.value >> 5;
      if(osc_type > 3) {
        lf_print_error_and_exit("Error in oscillator type calculation");
      }
      lf_set(osc.type, osc_type);
    } else {
      memcpy(&env.ctrl->value, &ctrl->value, sizeof(midi_controller_change_t));
      lf_set_present(env.ctrl);
    }
  =}

  osc.samples -> env.samples_raw
  env.samples -> samples
  env.dead -> osc.dead
}

reactor Merge(num_lanes:int=1) {
  input [num_lanes] in:sample_buffer_t*
  output out:sample_buffer_t*

  reaction(startup) -> out {=
    lf_set_destructor(out, sample_buffer_destructor);
    lf_set_copy_constructor(out, sample_buffer_copy);
  =}

  reaction(in) -> out {=
    int n_present = 0;
    for (int i = 0; i<in_width; i++) {
      if (in[i]->is_present) {
        n_present++;
      }
    }

    sample_buffer_t * buffer = sample_buffer_ctor();
    for (int i=0; i<in_width; i++) {
      if (in[i]->is_present) {
        for (int j=0; j<SAMPLE_SIZE; j++) {
          buffer->samples[j] += in[i]->value->samples[j];
        }
      }
    }
    lf_set(out, buffer);
  =}
}