target C

preamble {=
  #include "psynth.h"
=}

reactor FFT {
  input tsamples: sample_buffer_t
  output fsamples: fsample_buffer_t

  state cfg: kiss_fft_cfg

  reaction(startup) -> fsamples {=
    self->cfg = kiss_fft_alloc(SAMPLE_SIZE,0, NULL,NULL);
  =}

  reaction(tsamples) -> fsamples {=
    kiss_fft_cpx fin[SAMPLE_SIZE];
    for (int i=0; i<SAMPLE_SIZE; i++) {
      fin[i].r = tsamples->value.buffer[i];
      fin[i].i = 0;
    }

    kiss_fft(self->cfg, fin, fsamples->value.buffer);
    lf_set_present(fsamples);
  =}
}

reactor IFFT {
  output tsamples: sample_buffer_t
  input fsamples: fsample_buffer_t
  state cfg: kiss_fft_cfg

  reaction(startup) -> tsamples {=
    self->cfg = kiss_fft_alloc(SAMPLE_SIZE,1, NULL,NULL);
  =}

  reaction(fsamples) -> tsamples {=
    kiss_fft_cpx fout[SAMPLE_SIZE];

    kiss_fft(self->cfg, fsamples->value.buffer, fout);
    for (int i=0; i<SAMPLE_SIZE; i++) {
      tsamples->value.buffer[i] = fout[i].r/SAMPLE_SIZE;
    }
    lf_set_present(tsamples);
  =}
}
