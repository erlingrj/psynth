target C;

preamble {=
    
    #include <pulse/simple.h>
    #include "platform.h"
    #include <stdlib.h>
    #include <stdint.h>
    #include "common.h"
    
    // FIXME: Shouldnt be necessary
    #ifndef SOUND_OUTPUT_H
    #define SOUND_OUTPUT_H
    typedef struct {
        SAMPLE_TYPE* samples;
        bool* on;
        pa_sample_spec* spec;
        pa_simple* s;
    } generate_sound_args;
    #endif
=}


reactor SoundOutput {
    input samples: SAMPLE_TYPE[128]

    state spec: pa_sample_spec;
    state s: pa_simple*
    state _args: generate_sound_args
    state thread_id: lf_thread_t
    state on: bool = false;

    
    reaction(startup) samples {=
        // Initialize spec
        self->spec.format = PA_SAMPLE_FLOAT32;
        self->spec.rate = SAMPLE_RATE;
        self->spec.channels = 1;

        // Initialize pa
	    self->s = pa_simple_new(NULL, "lf_synth2", PA_STREAM_PLAYBACK, NULL, "lf_synth2", &self->spec, NULL, NULL, NULL);
	    // if (!self->s) lf_print_error_and_exit("Could not create pa_simple");

        // lf_thread_create(&self->thread_id, output_sound, &self->_args);
    =}
    reaction(samples) {= 
        pa_simple_write(self->s, samples->value, SAMPLE_NUM_BYTES, NULL);
    =}
}
