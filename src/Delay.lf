target uC;

preamble {=
  #include "psynth.h"
  #define MAX_DELAY SEC(2)
=}


reactor Delay(initialDelayTime: time = 1 sec, initialDelayLevel: double = 0.5) {
  input in: sample_buffer_t
  output out: sample_buffer_t

  @max_pending_events(1000)
  logical action a(0 msec, 0 msec, "replace"): sample_buffer_t
  state sample_period: interval_t
  state delay_period: interval_t
  state level: double

  reaction(startup) {=
    self->sample_period = SEC(SAMPLE_SIZE)/SAMPLE_RATE;
    self->delay_period = (self->initialDelayTime / self->sample_period) * self->sample_period;
    self->level = (self->initialDelayLevel);
  =}

  reaction(in) -> a {=
    if (self->level > 0 && self->delay_period > 0) {
      lf_schedule(a, self->delay_period, in->value);
    }
  =}

  reaction(in) a -> out {=
    sample_buffer_t samples;
    memcpy(&samples, &in->value, sizeof(sample_buffer_t));
    for (int i = 0; i<SAMPLE_SIZE; i++) {
      samples.buffer[i] += a->value.buffer[i]*self->level;
    }
    lf_set(out, samples);
  =}
}
